///
///  BinaryEncodingUnkeyedContainerNegativeTests.swift
///
///  Copyright 2017 Tony Stone
///
///  Licensed under the Apache License, Version 2.0 (the "License");
///  you may not use this file except in compliance with the License.
///  You may obtain a copy of the License at
///
///  http://www.apache.org/licenses/LICENSE-2.0
///
///  Unless required by applicable law or agreed to in writing, software
///  distributed under the License is distributed on an "AS IS" BASIS,
///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///  See the License for the specific language governing permissions and
///  limitations under the License.
///
///  Created by Tony Stone on 10/23/17.
///
import XCTest

///
/// Note: This file contains public interface tests so do not use @testable.
///
import StickyEncoding

/// =================================== NOTICE ========================================
/// Do NOT edit this file directly as it will be regenerated automatically when needed.
///
/// Modify the  *.swift.gyb file instead.
/// ===================================================================================
%{
variants = [
    ("Int",  "64",   "Bool", "true"),
    ("Bool", "true", "Int",   "32"),
    ("Bool", "true", "Int8",  "32"),
    ("Bool", "true", "Int16", "32"),
    ("Bool", "true", "Int32", "32"),
    ("Bool", "true", "Int64", "32"),
    ("Bool", "true", "UInt",  "32"),
    ("Bool", "true", "UInt8", "32"),
    ("Bool", "true", "UInt16","32"),
    ("Bool", "true", "UInt32","32"),
    ("Bool", "true", "UInt64","32"),
    ("Bool", "true", "Float", "32"),
    ("Bool", "true", "Double","32"),
    ("Bool", "true", "String", '"Test String"'),
    ("Bool", "true", "CodableType", "CodableType(32)"),
]
}%

///
/// Negative tests for unkeyed containers.
///
class BinaryEncodingUnkeyedContainerNegativeTests: XCTestCase {

    ///
	/// - throws: `DecodingError.typeMismatch` if the encountered encoded value is not convertible to the requested type.
    /// - throws: `DecodingError.valueNotFound` if the encountered encoded value is null, or of there are no more values to decode.
    ///
%  for (InputTypeName, InputValue, ExpectedTypeName, ExpectedValue) in variants:

    // MARK: - `${ExpectedTypeName}` Tests

    ///
    /// Test that a `DecodingError.valueNotFound` is thrown when a user tries to decode a `${ExpectedTypeName}` value that is nil.
    ///
    func testDecode${ExpectedTypeName}ValueNotFoundWhenValueIsNil() {

        struct InputType: Codable {
            var value: ${ExpectedTypeName}?
            init(value: ${ExpectedTypeName}?) { self.value = value }

            enum CodingKeys: CodingKey { case value }

            init(from decoder: Decoder) throws { self.value = nil }

            func encode(to encoder: Encoder) throws {
                var container = encoder.unkeyedContainer()
                try container.encodeNil()
            }
        }

        struct ExpectedType: Codable {
            var value: ${ExpectedTypeName}
            init(value: ${ExpectedTypeName}) { self.value = value }

            enum CodingKeys: CodingKey { case value }

            init(from decoder: Decoder) throws {
                var container = try decoder.unkeyedContainer()
                self.value = try container.decode(${ExpectedTypeName}.self)
            }
            func encode(to encoder: Encoder) throws {}
        }
        _testDecodeValueNotFound(input: InputType(value: nil), expected: (ExpectedType.self, ${ExpectedTypeName}.self, [], "Expected ${ExpectedTypeName} value but found null instead."))
    }

    ///
    /// Test that a `DecodingError.valueNotFound` is thrown when a user tries to decode a `${ExpectedTypeName}` value that is nil.
    ///
    func testDecode${ExpectedTypeName}ValueNotFoundWhenContainerIsNil() {

        struct InputType: Codable {
            var value: ${ExpectedTypeName}?
            init(value: ${ExpectedTypeName}?) { self.value = value }

            enum CodingKeys: CodingKey { case value }

            init(from decoder: Decoder) throws { self.value = nil }

            func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()  /// This will produce a container that nill can be inserted into directly
                try container.encodeNil()
            }
        }

        struct ExpectedType: Codable {
            var value: ${ExpectedTypeName}
            init(value: ${ExpectedTypeName}) { self.value = value }

            enum CodingKeys: CodingKey { case value }

            init(from decoder: Decoder) throws {
                var container = try decoder.unkeyedContainer()
                self.value = try container.decode(${ExpectedTypeName}.self)
            }
            func encode(to encoder: Encoder) throws {}
        }
        _testDecodeValueNotFound(input: InputType(value: nil), expected: (ExpectedType.self, UnkeyedDecodingContainer.self, [], "Expected UnkeyedDecodingContainer value but found null instead."))
    }

    ///
    /// Test that a `DecodingError.valueNotFound` is thrown when a user tries to decode a `${ExpectedTypeName}` value that is nil, or when there are no more values to decode.
    ///
    func testDecode${ExpectedTypeName}ValueNotFoundWhenNoMoreValues() {

        struct InputType: Codable {
            var value: ${ExpectedTypeName}?
            init(value: ${ExpectedTypeName}?) { self.value = value }

            enum CodingKeys: CodingKey { case value }

            init(from decoder: Decoder) throws { self.value = nil }

            func encode(to encoder: Encoder) throws {
                let _ = encoder.unkeyedContainer()
                /// Don't encode anything so we are at end  of container.
            }
        }

        struct ExpectedType: Codable {
            var value: ${ExpectedTypeName}
            init(value: ${ExpectedTypeName}) { self.value = value }
            enum CodingKeys: CodingKey { case value }

            init(from decoder: Decoder) throws {
                var container = try decoder.unkeyedContainer()
                self.value = try container.decode(${ExpectedTypeName}.self)
            }
            func encode(to encoder: Encoder) throws {}
        }
        _testDecodeValueNotFound(input: InputType(value: nil), expected: (ExpectedType.self, ${ExpectedTypeName}.self, [], "Unkeyed container is at end."))
    }

    ///
    /// Test that a `DecodingError.typeMismatch` is thrown when a user tries to decode a `${ExpectedTypeName}` value that was encoded as an `${InputTypeName}` type when using a UnkeyedContainer.
    ///
    func testDecode${ExpectedTypeName}TypeMismatchWhenValueNotConvertable() {

        struct InputType: Codable {
            var value: ${InputTypeName}
            init(value: ${InputTypeName}) { self.value = value }

            init(from decoder: Decoder) throws {
                var container = try decoder.unkeyedContainer(); self.value = try container.decode(${InputTypeName}.self)
            }
            func encode(to encoder: Encoder) throws {
                var container = encoder.unkeyedContainer(); try container.encode(self.value)
            }
        }

        struct ExpectedType: Codable {
            var value: ${ExpectedTypeName}
            init(value: ${ExpectedTypeName}) { self.value = value }

            init(from decoder: Decoder) throws {
                var container = try decoder.unkeyedContainer(); self.value = try container.decode(${ExpectedTypeName}.self)
            }
            func encode(to encoder: Encoder) throws {
                var container = encoder.unkeyedContainer(); try container.encode(self.value)
            }
        }
% if ExpectedTypeName == "CodableType":
        _testDecodeTypeMismatch(input: InputType(value: ${InputValue}), expected: (ExpectedType.self, ${ExpectedTypeName}.self, [], "Expected to decode KeyedDecodingContainer<CodingKeys> but found SingleValueDecodingContainer instead."))
% else:
        _testDecodeTypeMismatch(input: InputType(value: ${InputValue}), expected: (ExpectedType.self, ${ExpectedTypeName}.self, [], "Expected to decode ${ExpectedTypeName} but found ${InputTypeName} instead."))
% end
    }

    ///
    /// Test that a `DecodingError.typeMismatch` is thrown when a user tries to decode a `${ExpectedTypeName}` value that was not a correct container type when using a `UnkeyedContainer`.
    ///
    func testDecode${ExpectedTypeName}TypeMismatchWhenValueNotCorrectContainerType() {

        struct InputType: Codable {
            var value: ${InputTypeName}
            init(value: ${InputTypeName}) { self.value = value }

            init(from decoder: Decoder) throws {
                var container = try decoder.unkeyedContainer(); self.value = try container.decode(${InputTypeName}.self)
            }
            func encode(to encoder: Encoder) throws {
                var container = encoder.unkeyedContainer()
                var nestedContainer = container.nestedUnkeyedContainer()
                try nestedContainer.encode(self.value)
            }
        }

        struct ExpectedType: Codable {
            var value: ${ExpectedTypeName}
            init(value: ${ExpectedTypeName}) { self.value = value }

            init(from decoder: Decoder) throws {
                var container = try decoder.unkeyedContainer(); self.value = try container.decode(${ExpectedTypeName}.self)
            }
            func encode(to encoder: Encoder) throws {
                var container = encoder.unkeyedContainer(); try container.encode(self.value)
            }
        }
% if ExpectedTypeName == 'CodableType':
        _testDecodeTypeMismatch(input: InputType(value: ${InputValue}), expected: (ExpectedType.self, KeyedDecodingContainer<${ExpectedTypeName}.CodingKeys>.self, [], "Expected to decode KeyedDecodingContainer<CodingKeys> but found UnkeyedDecodingContainer instead."))
% else:
        _testDecodeTypeMismatch(input: InputType(value: ${InputValue}), expected: (ExpectedType.self, ${ExpectedTypeName}.self, [], "Expected to decode ${ExpectedTypeName} but found UnkeyedDecodingContainer instead."))
% end
    }
% end
}
